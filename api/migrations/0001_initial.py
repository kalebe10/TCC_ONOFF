# Generated by Django 3.0.5 on 2021-10-22 18:31

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agendador',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(blank=True, max_length=100)),
                ('data', models.CharField(blank=True, max_length=100, null=True)),
                ('hora', models.CharField(blank=True, max_length=100, null=True)),
                ('data_inicio', models.CharField(blank=True, max_length=100, null=True)),
                ('hora_inicio', models.CharField(blank=True, max_length=100, null=True)),
                ('data_fim', models.CharField(blank=True, max_length=100, null=True)),
                ('hora_fim', models.CharField(blank=True, max_length=100, null=True)),
                ('dia_semana', models.CharField(blank=True, default='', max_length=100)),
                ('loop', models.BooleanField(blank=True, default=False)),
                ('data_loop', models.IntegerField(blank=True, default=0)),
                ('hora_loop', models.IntegerField(blank=True, default=0)),
                ('tipo_acionamento', models.IntegerField(blank=True, default=0)),
                ('minuto_loop', models.IntegerField(blank=True, default=0)),
                ('ligar', models.BooleanField(blank=True, default=False)),
                ('desligar', models.BooleanField(blank=True, default=False)),
                ('modulo', models.TextField(blank=True)),
                ('sala', models.CharField(blank=True, max_length=100)),
                ('andar', models.CharField(blank=True, max_length=100)),
                ('ativo', models.BooleanField(blank=True, default=False)),
                ('data_hora', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Agendador',
            },
        ),
        migrations.CreateModel(
            name='Andar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('ativo', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Andar',
            },
        ),
        migrations.CreateModel(
            name='Modulo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(blank=True, max_length=100)),
                ('apelido', models.CharField(blank=True, default='', max_length=100)),
                ('sala', models.CharField(blank=True, default=0, max_length=100)),
                ('mac', models.CharField(blank=True, default='', max_length=100)),
                ('ativo', models.BooleanField(default=False)),
                ('data_hora_modifica', models.CharField(blank=True, max_length=100)),
                ('ssidRede', models.CharField(blank=True, default='', max_length=100)),
                ('pswRede', models.CharField(blank=True, default='', max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Modulos',
            },
        ),
        migrations.CreateModel(
            name='Sala',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('andar', models.CharField(max_length=100)),
                ('ativo', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Salas',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('nivel', models.IntegerField(blank=True, default=0, verbose_name='nivel')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_superuser', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='superuser')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
